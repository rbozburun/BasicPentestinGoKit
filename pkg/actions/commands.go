package actions

import (
	"fmt"
	"log"
	"os"

	"github.com/urfave/cli"
)

func Commands() {
	//Log to file
	LOG_FILE := "attacks.log"
	// open log file
	logFile, err := os.OpenFile(LOG_FILE, os.O_APPEND|os.O_RDWR|os.O_CREATE, 0644)

	if err != nil {
		log.Panic(err)
	}
	defer logFile.Close()
	// Set log output
	log.SetOutput(logFile)

	// optional: log date-time, filename, and line number
	log.SetFlags(log.Lshortfile | log.LstdFlags)

	app := &cli.App{
		Flags: []cli.Flag{
			cli.StringFlag{Name: "target", Usage: "target web url"},
			cli.BoolFlag{Name: "crossdomainxml", Usage: "check crossdomain.xml usage"},
			cli.BoolFlag{Name: "dirlisting", Usage: "check directory listing is enabled"},
			cli.BoolFlag{Name: "loginpagefinder", Usage: "Check the target URL is login page or not"},
			cli.BoolFlag{Name: "tracedetector", Usage: "Check the target URL is allow TRACE method"},
			cli.BoolFlag{Name: "serverdetector", Usage: "Check the target URL's used webserver"},
		},

		Action: func(c *cli.Context) error {
			if c.String("target") != "" {
				target := c.String("target")

				// If the user added --crossdomainxml parameter run this block.
				if c.Bool("crossdomainxml") {
					CrossdomainFlag(target)
				}

				if c.Bool("dirlisting") {
					DirListing(target)
				}

				if c.Bool("loginpagefinder") {
					LoginPageFinder(target)
				}

				if c.Bool("tracedetector") {
					TraceDetector(target)
				}

				if c.Bool("serverdetector") {
					ServerDetector(target)
				}

			} else {
				fmt.Println("Target cannot be empty!")
			}

			return nil
		},
	}

	err = app.Run(os.Args)
	if err != nil {
		log.Fatal(err)
	}
}
