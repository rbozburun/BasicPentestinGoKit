package actions

// TO DO
//
// Implement dirlisting, loginpagefinder, tracedetector, usedserverdetector functions.

import (
	"fmt"
	"net/http"
	"regexp"
	"strconv"
	"strings"

	"github.com/PuerkitoBio/goquery"
)

func errCheck(err error) {
	if err != nil {
		fmt.Println(err)
	}
}

// Checks url if suffix "/", if not adds it.
func createRootURL(target string) string {
	last := target[len(target)-1:]

	// Check the URL includes "/"
	if last != "/" {
		target = (target + "/")
	}

	return target
}

// TO DO
//
// Crossdomain checker doesn't working properly for the URL: https://www.welovedogs.jp/movie
func CrossdomainFlag(target string) {
	fmt.Println("\nYour target to check crossdomain.xml:", target)
	targetUrl := createRootURL(target)

	crossd_url := targetUrl + "crossdomain.xml"
	resp, err := http.Get(targetUrl)
	errCheck(err)
	if resp.StatusCode > 400 {
		resp, err = http.Get(target)
		errCheck(err)
	}

	if resp.StatusCode > 400 {
		fmt.Println("[!] Status code: " + strconv.Itoa(resp.StatusCode) + " | Crossdomain.xml Couldn't Find!")
	} else if resp.StatusCode == 200 {
		fmt.Println("[+] Crossdomain found: " + crossd_url)
	} else {
		fmt.Println("[i] Redirection detected. Crossdomain file couldn't find.")
	}
}

func DirListing(target string) {
	fmt.Println("Your target to check DirListing:", target)
	targetUrl := createRootURL(target)

	resp, err := http.Get(targetUrl)
	errCheck(err)
	if resp.StatusCode > 400 {
		resp, err = http.Get(target)
		errCheck(err)
	}

	if resp.StatusCode > 400 {
		fmt.Println("[!] Status code: " + strconv.Itoa(resp.StatusCode) + " | The page couldn't load!")
	} else if resp.StatusCode == 200 {
		doc, err := goquery.NewDocumentFromReader(resp.Body)
		defer resp.Body.Close()
		errCheck(err)
		title := doc.Find("title").Text()
		titleLower := strings.ToLower(title)

		if strings.Contains(titleLower, "index of") {
			fmt.Println("[i] Title found: \"" + title + "\"\n[+] Dirlisting detected! --> URL: " + targetUrl)
		}

	} else {
		fmt.Println("[i] Redirection detected.")
	}
}

func LoginPageFinder(target string) {
	fmt.Println("Your target to check LoginPageFinder:", target)
	targetUrl := createRootURL(target)
	re, err := regexp.Compile("Giriş|Kullanıcı Adı|Parola|Doğrulama Kodu|Yönetim Paneli|Login|Log in|log in|Log In|log In|LOG IN|login|LOGIN|Giriş|Giris|giris|GİRİS|GIRIS|GİRİŞ|Kayıt Ol|Kayıt ol|Kaydol|kayıt ol|KAYIT O|kaydol|KAYDOL|oturum ac|OTURUM AÇ|Oturum Aç|oturum aç|Oturum Ac|Submit|submit|SUBMIT|SUBMİT|submıt|Submıt")
	errCheck(err)

	fmt.Println("URL: ", targetUrl)
	resp, err := http.Get(targetUrl)
	errCheck(err)
	if resp.StatusCode > 400 {
		resp, err = http.Get(target)
		errCheck(err)
	}

	if resp.StatusCode > 400 {
		fmt.Println("[!] Status code: " + strconv.Itoa(resp.StatusCode) + " | The page couldn't load!")
	} else if resp.StatusCode == 200 {
		// Check the page is include login keywords and "<input"
		doc, err := goquery.NewDocumentFromReader(resp.Body)
		errCheck(err)

		body := doc.Find("body")
		html, err := body.Html()
		errCheck(err)

		if strings.Contains(html, "<input") {
			if re.FindString(html) != "" {
				fmt.Println("[+] This page might be a login page: " + targetUrl)
			}
		}

	} else {
		return
	}
}

func TraceDetector(target string) {
	fmt.Println("Your target to check TraceDetector:", target)
}

func ServerDetector(target string) {
	fmt.Println("Your target to check ServerDetector:", target)
}
